{"ast":null,"code":"var _jsxFileName = \"/Users/meg/Desktop/final-project-musically-challenged-masters/client/src/instruments/SebinDrum.tsx\";\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport { List } from 'immutable'; // project imports\n\nimport { Instrument } from '../Instruments';\nimport '../instruments/SebinDrum.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PlayDrums(note, type) {\n  switch (type) {\n    case 1:\n      {\n        const synth = new Tone.MembraneSynth().toDestination();\n        synth.triggerAttackRelease(note, \"8n\"); //synth.disconnect();\n\n        break;\n      }\n\n    case 2:\n      {\n        const synth = new Tone.NoiseSynth().toDestination();\n        synth.triggerAttackRelease(\"8n\"); //synth.disconnect();\n\n        break;\n      }\n\n    case 3:\n      {\n        const synth = new Tone.MetalSynth().toDestination();\n        synth.triggerAttackRelease(note, \"64n\"); //synth.disconnect();\n\n        break;\n      }\n\n    case 4:\n      {\n        const synth = new Tone.FMSynth().toDestination();\n        synth.triggerAttackRelease(note, \"32n\"); //synth.disconnect();\n\n        break;\n      }\n  }\n}\n_c = PlayDrums;\nexport function DrumPads({\n  note,\n  //synth,\n  index,\n  type,\n  typeName\n}) {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  return (\n    /*#__PURE__*/\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    _jsxDEV(\"div\", {\n      onClick: () => PlayDrums(note, type) // Question: what is `onMouseDown`?\n      ,\n      className: typeName //onMouseUp={() => synth?.triggerRelease('+0.25')} // Question: what is `onMouseUp`?\n      // className={classNames('ba pointer absolute dim', {\n      //   'bg-white black h3'\n      // })}\n      ,\n      children: [typeName, \" \", index]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c2 = DrumPads;\n\nfunction Drum({\n  synth,\n  setSynth\n}) {\n  const basskeys = List([{\n    note: 'C0',\n    idx: 1\n  }, {\n    note: 'D1',\n    idx: 2\n  }, {\n    note: 'F1',\n    idx: 3\n  }, {\n    note: 'A1',\n    idx: 4\n  }, {\n    note: 'B1',\n    idx: 5\n  }, {\n    note: 'F2',\n    idx: 6\n  }]);\n  const snareKeys = List([{\n    note: 'C1',\n    idx: 1\n  }]);\n  const metalKeys = List([{\n    note: 'C5',\n    idx: 1\n  }]);\n  const bellKeys = List([{\n    note: 'C5',\n    idx: 1\n  }, {\n    note: 'D5',\n    idx: 2\n  }, {\n    note: 'E5',\n    idx: 3\n  }, {\n    note: 'F5',\n    idx: 4\n  }, {\n    note: 'G5',\n    idx: 5\n  }, {\n    note: 'A5',\n    idx: 6\n  }, {\n    note: 'B5',\n    idx: 7\n  }, {\n    note: 'C6',\n    idx: 8\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative dib h4 w-100 ml4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsideBox\",\n        children: [basskeys.map(key => {\n          //const isMinor = key.note.indexOf('b') !== -1;\n          const type = 1;\n          const note = `${key.note}`;\n          const typeName = 'Bass';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drumPad\",\n            children: /*#__PURE__*/_jsxDEV(DrumPads, {\n              //react key\n              note: note,\n              type: type,\n              typeName: typeName //octave={octave}\n              //duration = {key.idx+0.5.toString()}\n              ,\n              index: key.idx\n            }, note, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this);\n        }), snareKeys.map(key => {\n          //const isMinor = key.note.indexOf('b') !== -1;\n          const note = `${key.note}`;\n          const type = 2;\n          const typeName = 'Snare';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drumPad\",\n            children: /*#__PURE__*/_jsxDEV(DrumPads, {\n              //react key\n              note: note,\n              type: type,\n              typeName: typeName //octave={octave}\n              //duration = {key.idx+0.5.toString()}\n              ,\n              index: key.idx\n            }, note, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        }), metalKeys.map(key => {\n          //const isMinor = key.note.indexOf('b') !== -1;\n          const note = `${key.note}`;\n          const type = 3;\n          const typeName = 'Hi-Hat';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drumPad\",\n            children: /*#__PURE__*/_jsxDEV(DrumPads, {\n              //react key\n              type: type,\n              note: note,\n              typeName: typeName //octave={octave}\n              //duration = {key.idx+0.5.toString()}\n              ,\n              index: key.idx\n            }, note, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsideBox\",\n        children: [bellKeys.map(key => {\n          //const isMinor = key.note.indexOf('b') !== -1;\n          const note = `${key.note}`;\n          const type = 4;\n          const typeName = 'Bell';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bellPad\",\n            children: /*#__PURE__*/_jsxDEV(DrumPads, {\n              //react key\n              type: type,\n              note: note,\n              typeName: typeName //octave={octave}\n              //duration = {key.idx+0.5.toString()}\n              ,\n              index: key.idx\n            }, note, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Drum;\nexport const DrumPad = new Instrument('Drums', Drum);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PlayDrums\");\n$RefreshReg$(_c2, \"DrumPads\");\n$RefreshReg$(_c3, \"Drum\");","map":{"version":3,"sources":["/Users/meg/Desktop/final-project-musically-challenged-masters/client/src/instruments/SebinDrum.tsx"],"names":["Tone","List","Instrument","PlayDrums","note","type","synth","MembraneSynth","toDestination","triggerAttackRelease","NoiseSynth","MetalSynth","FMSynth","DrumPads","index","typeName","Drum","setSynth","basskeys","idx","snareKeys","metalKeys","bellKeys","map","key","DrumPad"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport { List, Range } from 'immutable';\n\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\nimport '../instruments/SebinDrum.css';\nimport { ClassificationTypeNames } from 'typescript';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Piano.\n ** ------------------------------------------------------------------------ */\n\n\ninterface DrumProps {\n  note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n  type: number;\n  //synth?: Tone.MembraneSynth;// Contains library code for making sound\n  //octave: number;\n  typeName: string;\n  index: number; // octave + index together give a location for the piano key\n}\nexport function PlayDrums(note: string, type: number){\n  switch(type){\n    case 1:{\n      const synth = new Tone.MembraneSynth().toDestination();\n      synth.triggerAttackRelease(note, \"8n\");\n      //synth.disconnect();\n      break;\n    }\n    case 2:{\n      const synth = new Tone.NoiseSynth().toDestination();\n      synth.triggerAttackRelease(\"8n\");\n      //synth.disconnect();\n      break;\n    }\n    case 3:{\n      const synth = new Tone.MetalSynth().toDestination();\n      synth.triggerAttackRelease(note, \"64n\");\n      //synth.disconnect();\n      break;\n    }\n    case 4:{\n      const synth = new Tone.FMSynth().toDestination();\n      synth.triggerAttackRelease(note, \"32n\");\n      //synth.disconnect();\n      break;\n    }\n  }\n\n}\n\nexport function DrumPads({\n  note,\n  //synth,\n  index,\n  type,\n  typeName,\n}: DrumProps): JSX.Element {\n  /**\n   * This React component corresponds to either a major or minor key in the piano.\n   * See `PianoKeyWithoutJSX` for the React component without JSX.\n   */\n  return (\n    // Observations:\n    // 1. The JSX refers to the HTML-looking syntax within TypeScript.\n    // 2. The JSX will be **transpiled** into the corresponding `React.createElement` library call.\n    // 3. The curly braces `{` and `}` should remind you of string interpolation.\n    <div\n      onClick={() => PlayDrums(note, type)} // Question: what is `onMouseDown`?\n      className = {typeName}\n      //onMouseUp={() => synth?.triggerRelease('+0.25')} // Question: what is `onMouseUp`?\n      // className={classNames('ba pointer absolute dim', {\n      //   'bg-white black h3'\n      // })}\n    >\n      {typeName} {index}\n    </div>\n  );\n}\n\n\nfunction Drum({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const basskeys = List([\n    { note: 'C0', idx: 1 },\n    { note: 'D1', idx: 2 },\n    { note: 'F1', idx: 3 },\n    { note: 'A1', idx: 4 },\n    { note: 'B1', idx: 5 },\n    { note: 'F2', idx: 6 },\n  ]);\n\n  const snareKeys = List([\n    { note: 'C1', idx: 1 },\n  ]);\n\n  const metalKeys = List([\n    { note: 'C5', idx: 1 },\n  ]);\n\n  const bellKeys = List([\n    { note: 'C5', idx: 1 },\n    { note: 'D5', idx: 2 },\n    { note: 'E5', idx: 3 },\n    { note: 'F5', idx: 4 },\n    { note: 'G5', idx: 5 },\n    { note: 'A5', idx: 6 },\n    { note: 'B5', idx: 7 },\n    { note: 'C6', idx: 8 },\n\n  ]);\n\n  return (\n    <div className=\"pv4\">\n      <div className=\"relative dib h4 w-100 ml4\">\n        <div className='outsideBox'>\n          {basskeys.map(key => {\n            //const isMinor = key.note.indexOf('b') !== -1;\n            const type =1;\n            const note = `${key.note}`;\n            const typeName = 'Bass';\n            return (\n              <div className = 'drumPad'>\n              <DrumPads\n                key={note} //react key\n                note={note}\n                type = {type}\n                typeName ={typeName}\n                //octave={octave}\n                //duration = {key.idx+0.5.toString()}\n                index={key.idx}\n              />\n              </div>\n            );\n          })\n        }\n\n        {snareKeys.map(key => {\n            //const isMinor = key.note.indexOf('b') !== -1;\n            const note = `${key.note}`;\n            const type=2;\n            const typeName = 'Snare';\n            return (\n              <div className = 'drumPad'>\n              <DrumPads\n                key={note} //react key\n                note={note}\n                type={type}\n                typeName={typeName}\n                //octave={octave}\n                //duration = {key.idx+0.5.toString()}\n                index={key.idx}\n              />\n             </div>\n            );\n          })\n        } \n        {metalKeys.map(key => {\n            //const isMinor = key.note.indexOf('b') !== -1;\n            const note = `${key.note}`;\n            const type=3;\n            const typeName = 'Hi-Hat';\n            return (\n              <div className = 'drumPad'>\n\n              <DrumPads\n                key={note} //react key\n                type={type}\n                note={note}\n                typeName = {typeName}\n                //octave={octave}\n                //duration = {key.idx+0.5.toString()}\n                index={key.idx}\n              />\n              </div>\n            );\n          })\n        }\n        </div>\n\n        <div className='outsideBox'>\n        {/* {Range(2, 3).map(octave => */}\n          {bellKeys.map(key => {\n            //const isMinor = key.note.indexOf('b') !== -1;\n            const note = `${key.note}`;\n            const type = 4\n            const typeName = 'Bell';\n\n            return (\n              <div className = 'bellPad'>\n              <DrumPads\n                key={note} //react key\n                type={type}\n                note={note}\n                typeName = {typeName}\n                //octave={octave}\n                //duration = {key.idx+0.5.toString()}\n                index={key.idx}\n              />\n              </div>\n            );\n          })\n        }\n        <br/>\n        <br/>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const DrumPad = new Instrument('Drums', Drum);\n"]},"metadata":{},"sourceType":"module"}