{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const OcarinaVisualizer = new Visualizer('KingFasa', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  p5.background(0, 0, 0, 255);\n  p5.strokeWeight(dim * 0.01);\n  p5.stroke(0, 165, 0, 255);\n  p5.noFill();\n  const values = analyzer.getValue();\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const x = 500 + amplitude * height / 10;\n    const y = 200;\n    p5.ellipse(x, y, 700, 700);\n    p5.ellipse(x, y, 600, 600);\n    p5.ellipse(x, y, 500, 500);\n    p5.ellipse(x, y, 400, 400);\n  }\n\n  p5.endShape(); // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //                     UPPER TRI /\\\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ~~~~~~~~~~\n  //   base _\n  // ~~~~~~~~~~\n\n  p5.stroke(255, 165, 0, 255);\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const x = p5.map(i, 0, values.length + height, 350, 1150);\n    const y = 200 + amplitude * height / 4;\n    p5.vertex(x, y);\n  }\n\n  p5.endShape(); //~~~~~~~~~~\n  //   top /\\\n  //~~~~~~~~~~\n\n  p5.stroke(255, 165, 0, 255);\n  p5.beginShape(); //~~~~~~~~~~\n  //   left /\n  //~~~~~~~~~~\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const x = 500;\n    const y = p5.map(i, 10, values.length + height, 50, 50);\n    p5.vertex(x, y);\n    const x2 = 350 + amplitude / 8 * height;\n    const y2 = 200;\n    p5.vertex(x2, y2);\n  } //~~~~~~~~~~\n  //   right \\\n  //~~~~~~~~~~\n\n\n  for (let i = 0; i < values.length; i++) {\n    const amplitude = values[i];\n    const x = 500;\n    const y = p5.map(i, 10, values.length + height, 50, 50);\n    p5.vertex(x, y);\n    const x2 = 650 + amplitude / 8 * height;\n    const y2 = 200;\n    p5.vertex(x2, y2);\n  }\n\n  p5.endShape(); // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ENDENDENDENDEND       UPPER TRI /\\       ENDENDENDENDEND\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n});","map":{"version":3,"sources":["/Users/meg/Desktop/final-project-musically-challenged-masters/client/src/visualizers/KingFasa.tsx"],"names":["Visualizer","OcarinaVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","background","strokeWeight","stroke","noFill","values","getValue","beginShape","i","length","amplitude","x","y","ellipse","endShape","map","vertex","x2","y2"],"mappings":"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","sourcesContent":["\n// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const OcarinaVisualizer = new Visualizer(\n  'KingFasa',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n    p5.background(0, 0, 0, 255);\n\n\n    p5.strokeWeight(dim * 0.01);\n\n\n\n    p5.stroke(0, 165, 0, 255);\n    p5.noFill();    \n\n    const values = analyzer.getValue();\n\n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const amplitude = values[i] as number;      \n      const x = 500 + amplitude * height/10;\n      const y = 200 ;\n\n\n      p5.ellipse(x, y, 700, 700);\n      p5.ellipse(x, y, 600, 600);\n      p5.ellipse(x, y, 500, 500);      \n      p5.ellipse(x, y, 400, 400);\n     \n\n    }\n    p5.endShape();\n \n   \n   \n\n    \n\n\n\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    //                     UPPER TRI /\\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    // ~~~~~~~~~~\n    //   base _\n    // ~~~~~~~~~~\n    p5.stroke(255, 165, 0, 255);\n    p5.beginShape();\n      for (let i = 0; i < values.length; i++) {\n        const amplitude = values[i] as number;\n        const x = p5.map(i, 0, values.length + height, 350, 1150);\n        const y = 200 + amplitude * height/4;\n        p5.vertex(x, y);\n      }\n    p5.endShape();\n\n\n\n    //~~~~~~~~~~\n    //   top /\\\n    //~~~~~~~~~~\n    p5.stroke(255, 165, 0, 255);\n    p5.beginShape();  \n    //~~~~~~~~~~\n    //   left /\n    //~~~~~~~~~~\n      for (let i = 0; i < values.length; i++) {\n          const amplitude = values[i] as number;          \n          const x = 500; \n          const y = p5.map(i, 10, values.length + height, 50, 50);\n          p5.vertex(x, y)\n          const x2 = 350 + amplitude/8 * height;\n          const y2 = 200;\n          p5.vertex(x2,y2)          \n        }\n    //~~~~~~~~~~\n    //   right \\\n    //~~~~~~~~~~\n\n    \n        for (let i = 0; i < values.length; i++) {\n          const amplitude = values[i] as number;\n          const x = 500; \n          const y = p5.map(i, 10, values.length + height, 50, 50);\n          p5.vertex(x, y)        \n          const x2 = 650 + amplitude/8 * height;\n          const y2 = 200;\n          p5.vertex(x2,y2)          \n        }\n\n    p5.endShape();\n\n\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    // ENDENDENDENDEND       UPPER TRI /\\       ENDENDENDENDEND\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n\n  },\n);\n\n"]},"metadata":{},"sourceType":"module"}